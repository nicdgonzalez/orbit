#!/usr/bin/bash

#  ██████╗ ██████╗ ██████╗ ██╗████████╗
# ██╔═══██╗██╔══██╗██╔══██╗██║╚══██╔══╝
# ██║   ██║██████╔╝██████╔╝██║   ██║
# ██║   ██║██╔══██╗██╔══██╗██║   ██║
# ╚██████╔╝██║  ██║██████╔╝██║   ██║
#  ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝   ╚═╝

set -eo pipefail
[ ! -z "${TRACE+x}" ] && set -x

ORBIT_VERSION="0.1.0"

main() {
    declare query="$1"

    validate_dependencies
    parse_options "$@"

    local directories="$(echo "$ORBIT_PATH" | tr ':' ' ')"
    local options="$(find $directories -mindepth 1 -maxdepth 1 -type d)"
    local preview='
        session_name="$(echo {-1} | tr ":. " "___")";
        tmux has-session -t "=$session_name" 2> /dev/null \
            && tmux capture-pane -pt "$session_name" 2> /dev/null \
            || echo "Session not running."
    '
    local selected="$( \
        echo "$options" \
        | fzf \
            --delimiter '/' \
            --nth '-1' \
            --with-nth '-1' \
            --preview "$preview" \
            --preview-window 'nohidden' \
            --preview-label 'Session Preview' \
            --height=50% \
            --margin=5%,1% \
            --border \
            --tmux=center,90%,50%,border-native \
            --query "$query" \
            --select-1 \
    )"

    if [ -z "$selected" ]; then
        # User intentionally closed fzf.
        exit 0
    fi

    # tmux uses ':' and '.' to separate sessions, windows, and panes;
    # ensure these characters are not used for the session name.
    local session_name="$(basename "$selected" | tr ':. ' '___')"

    # Create the fallback script if it doesn't already exist.
    local fallback="${XDG_CONFIG_HOME:-$HOME/.config}/orbit/orbit.sh"
    if [ ! -e "$fallback" ]; then
        mkdir --parents "$(dirname "$fallback")"
        echo "$(get_template)" > "$fallback"
        chmod u+x "$fallback"
    fi

    # If `selected` does not contain an orbit.sh, use `fallback` instead.
    local script="$(test -e "$selected/orbit.sh" && echo "$selected/orbit.sh" || echo "$fallback")"

    # Create the tmux session if it doesn't already exist.
    if ! tmux has-session -t "=$session_name" 2> /dev/null; then
        tmux new-session -d -s "$session_name" -c "$selected"
        tmux send-keys -t "$session_name" "cat \"$script\" | bash" 'Enter'
    fi

    # Check if we are already in a tmux session.
    if [ ! -z "${TMUX+x}" ]; then
        tmux switch-client -t "$session_name"
    else
        tmux attach-session -t "$session_name"
    fi
}

validate_dependencies() {
    if ! command -v bash > /dev/null; then
        echo >&2 "error: expected bash to be installed and on PATH"
        exit 1
    fi

    if ! command -v tmux > /dev/null; then
        echo >&2 "error: expected tmux to be installed and on PATH"
        exit 1
    fi

    if ! command -v fzf > /dev/null; then
        echo >&2 "error: expected fzf to be installed and on PATH"
        exit 1
    fi
}

parse_options() {
    while [ $# -gt 0 ]; do
        case "$1" in
            '-h' | '--help')
                orbit_help
                exit 0
                ;;
            '-V' | '--version')
                orbit_version
                exit 0
                ;;
            '--')
                shift
                break
                ;;
            '-'*)
                echo >&2 "error: unknown option: $1"
                exit 1
                ;;
            *)
                break
                ;;
        esac
        shift
    done
}

orbit_help() {
    echo "\
🚀 Quickly spin up pre-configured tmux sessions for your projects.

USAGE: $(basename "$0") [OPTIONS] [--] [QUERY]

OPTIONS:
  -h, --help     Print help
  -V, --version  Print version

Repository: https://github.com/nicdgonzalez/orbit"
}

orbit_version() {
    echo "orbit $ORBIT_VERSION"
}

get_template() {
    cat "$PWD/template.txt"
}

# The main entry point to the program.
main "$@"

unset -f main
unset -f validate_dependencies
unset -f parse_options
unset -f orbit_help
unset -f orbit_version
unset -f get_template
